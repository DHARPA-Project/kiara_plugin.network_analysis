name: "linux tests and documentation builds for 'kiara_plugin.network_analysis'"
# This workflow is triggered on pushes to the repository.
on: [push]

jobs:

#  commitlint:
#    name: lint commit message
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - uses: wagoid/commitlint-github-action@v4

  test-linux:
    name: pytest on linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.9"
          use-cache: true
      - name: install Python
        run: uv python install ${{ matrix.python_version }}
      - name: create lockfile
        if: hashFiles('uv.lock') == ''
        run: uv lock --python ${{ matrix.python_version }}
      - name: install the project
        run: uv sync --locked --dev --python ${{ matrix.python_version }}
      - name: test with pytest
        run: uv run pytest --cov-report=xml --cov=kiara_plugin.network_analysis tests
      - name: Coveralls
        uses: coverallsapp/github-action@v2
        with:
          parallel: true
          flag-name: run ${{ join(matrix.*, ' - ') }}
          format: cobertura
          file: coverage.xml

  coverage:
    name: test coverage
    runs-on: ubuntu-latest
    needs:
      - test-linux
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true

  mypy-linux:
    name: mypy check on linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.9"
          use-cache: true
      - name: install Python
        run: uv python install ${{ matrix.python_version }}
      - name: create lockfile
        if: hashFiles('uv.lock') == ''
        run: uv lock --python ${{ matrix.python_version }}
      - name: install the project
        run: uv sync --locked --dev --python ${{ matrix.python_version }}
      - name: Test with mypy
        run: make mypy

  linting-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: astral-sh/ruff-action@v3
        with:
          args: "--version"
      - name: Run ruff check
        run: ruff check src/
      - name: Run ruff check
        run: ruff format --check --diff src/

  build_python_package:
    name: build python package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.9"
          use-cache: true
      - name: install Python
        run: uv python install ${{ matrix.python_version }}
      - name: create lockfile
        if: hashFiles('uv.lock') == ''
        run: uv lock --python ${{ matrix.python_version }}
      - name: install the project
        run: uv sync --locked --dev --python ${{ matrix.python_version }}
      - name: create packages
        run: uv run python -m build
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dists
          path: dist/

  release_python_package:
    name: publish python package to pypi
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - build_python_package
      - build_conda_package
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Retrieve build distributions
        uses: actions/download-artifact@v4
        with:
          name: build-dists
          path: dist/
      - name: publish to PyPI  # make sure you have pypi trusted publishing configured for this repo
        uses: pypa/gh-action-pypi-publish@release/v1

  build_conda_package:
    name: conda package build (and upload if release)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.9"
          use-cache: true
      - name: install Python
        run: uv python install ${{ matrix.python_version }}
      - name: create lockfile
        if: hashFiles('uv.lock') == ''
        run: uv lock --python ${{ matrix.python_version }}
      - name: install the project
        run: uv sync --locked --dev --python ${{ matrix.python_version }}
      - name: install kiara_plugin.develop
        run: uv add git+https://github.com/DHARPA-project/kiara_plugin.develop --branch develop
      - name: build conda package
        run: uv run kiara build conda pkg --channel dharpa --channel conda-forge --patch-data ci/conda/conda-pkg-patch.yaml --output-folder build-dir .
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: conda-pkgs
          path: build-dir/

  release_conda_package:
    name: publish conda package to anaconda
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs:
      - test-linux
      - mypy-linux
      - linting-linux
      - build_python_package
      - build_conda_package
    steps:
      - name: Retrieve build distributions
        uses: actions/download-artifact@v4
        with:
          name: conda-pkgs
          path: build-dir/
      - name: install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.5.9"
          use-cache: true
      - name: install Python
        run: uv python install ${{ matrix.python_version }}
      - name: create lockfile
        if: hashFiles('uv.lock') == ''
        run: uv lock --python ${{ matrix.python_version }}
      - name: install the project
        run: uv sync --locked --dev --python ${{ matrix.python_version }}
      - name: install kiara_plugin.develop
        run: uv add git+https://github.com/DHARPA-project/kiara_plugin.develop --branch develop
      - name: release conda package
        run: uv run kiara build conda publish --user dharpa --channel main --token ${{ secrets.ANACONDA_PUSH_TOKEN }} build-dir

  merge_tag_to_main:
    name: merge current tag to main branch
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs:
      - release_python_package
      - release_conda_package
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - run: git config --global user.email "markus@frkl.io"
    - run: git config --global user.name "Markus Binsteiner"
    - name: extract tag name
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: checkout main branch
      run: git checkout main
    - name: merge tag
      run: git merge "${RELEASE_VERSION}"
    - name: push updated main branch
      run: git push https://${{ secrets.GITHUB_TOKEN }}@github.com/DHARPA-Project/kiara_plugin.network_analysis.git
