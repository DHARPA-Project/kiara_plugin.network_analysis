# -*- coding: utf-8 -*-
from enum import Enum
from typing import Literal

NODE_ID_COLUMN_NAME = "_node_id"
EDGE_ID_COLUMN_NAME = "_edge_id"
SOURCE_COLUMN_NAME = "_source"
TARGET_COLUMN_NAME = "_target"
LABEL_COLUMN_NAME = "_label"

COMPONENT_ID_COLUMN_NAME = "component_id"
IS_CUTPOINT_COLUMN_NAME = "is_cut_point"

EDGES_TABLE_NAME = "edges"
NODES_TABLE_NAME = "nodes"


DEFAULT_NETWORK_DATA_CHUNK_SIZE = 1024

NODE_ID_ALIAS_NAMES = ["id", "node_id"]
LABEL_ALIAS_NAMES = ["label", "node_label"]

SOURCE_COLUMN_ALIAS_NAMES = ["source", "sources", "source_id", "from", "sender"]
TARGET_COLUMN_ALIAS_NAMES = ["target", "targets", "target_id", "to", "receiver"]

ATTRIBUTE_PROPERTY_KEY = "attribute_property"

# WEIGHT_COLUMN_ALIAS_NAMES = [
#     "weight",
#     "weights",
#     "edge_weight",
#     "edge_weights",
#     "strength",
#     "strengths",
# ]

COUNT_DIRECTED_COLUMN_NAME = "_count_dup_directed"
COUNT_UNDIRECTED_COLUMN_NAME = "_count_dup_undirected"
COUNT_IDX_DIRECTED_COLUMN_NAME = "_idx_dup_directed"
COUNT_IDX_UNDIRECTED_COLUMN_NAME = "_idx_dup_undirected"

IN_DIRECTED_COLUMN_NAME = "_in_edges"
OUT_DIRECTED_COLUMN_NAME = "_out_edges"
CONNECTIONS_COLUMN_NAME = "_count_edges"

IN_DIRECTED_MULTI_COLUMN_NAME = "_in_edges_multi"
OUT_DIRECTED_MULTI_COLUMN_NAME = "_out_edges_multi"
CONNECTIONS_MULTI_COLUMN_NAME = "_count_edges_multi"


RANKING_TABLE_NAME = "ranking"
RANKING_COLUNN_NAME = "_rank"
RANKING_VALUE_COLUMN_NAME = "_value"

AUTO_CALCULATED_EDGE_COLUMNS = [
    EDGE_ID_COLUMN_NAME,
    SOURCE_COLUMN_NAME,
    TARGET_COLUMN_NAME,
    COUNT_DIRECTED_COLUMN_NAME,
    COUNT_IDX_DIRECTED_COLUMN_NAME,
    COUNT_UNDIRECTED_COLUMN_NAME,
    COUNT_IDX_UNDIRECTED_COLUMN_NAME,
]


AUTO_CALCULATED_NODE_COLUMNS = [
    NODE_ID_COLUMN_NAME,
    LABEL_COLUMN_NAME,
    IN_DIRECTED_COLUMN_NAME,
    OUT_DIRECTED_COLUMN_NAME,
    IN_DIRECTED_MULTI_COLUMN_NAME,
    OUT_DIRECTED_MULTI_COLUMN_NAME,
]


class NetworkDataTableType(Enum):
    EDGES = EDGES_TABLE_NAME
    NODES = NODES_TABLE_NAME


class GraphType(Enum):
    UNDIRECTED = "undirected"
    DIRECTED = "directed"
    DIRECTED_MULTI = "directed_multi"
    UNDIRECTED_MULTI = "undirected_multi"


NODE_ID_TEXT = """The unique id for the node.

This is a unique integer identifier (counting up from 0) and is automatically generated by kiara, for each `network_data` value.
"""
NODE_LABEL_TEXT = """The label for the node.

This is a (potentially non-unique) (ideally) human meaningful lable for the node, mostly used in visualizations. Depending on
how the 'network_data' was created, this could be a name, title, etc. If no such label was available or specified
by the user, the node id will be used as label.
"""

NODE_COUNT_EDGES_TEXT = """The number of edges that are connected to this node if the network_data is interpreted as a non-multi graph

Both incoming and outgoing edges are counted, which means that the number is valid for both directed and undirected graphs.
."""
NODE_COUNT_EDGES_MULTI_TEXT = """The number of edges that are connected to this node if the network_data is interpreted as a multi graph

Both incoming and outgoing edges are counted, which means that the number is valid for both directed and undirected graphs."""
NODE_COUNT_IN_EDGES_TEXT = """The number of incoming edges that are connected to this node if the network_data is interpreted as a non-multi graph."""
NODE_COUNT_IN_EDGES_MULTI_TEXT = """The number of incoming edges that are connected to this node if the network_data is interpreted as a multi graph."""
NODE_COUNT_OUT_EDGES_TEXT = """The number of outgoing edges that are connected to this node if the network_data is interpreted as a non-multi graph."""
NODE_COUNT_OUT_EDGES_MULTI_TEXT = """The number of outgoing edges that are connected to this node if the network_data is interpreted as a multi graph."""

EDGE_ID_TEXT = """The unique id for the edge.

This is a unique integer identifier (counting up from 0) and is automatically generated by kiara, for each `network_data` value.
"""
EDGE_SOURCE_TEXT = """The node id of the source for an edge."""
EDGE_TARGET_TEXT = """The node id of the target for an edge."""

EDGE_COUNT_DUP_DIRECTED_TEXT = """The number of edges that have the same source/target combination as this (incl. this), if the network_data is interpreted as directed multi graph.
"""
EDGE_IDX_DUP_DIRECTED_TEXT = """A unique index for this edge within its set of duplicates, if the network_data is interpreted as directed multi graph.

This is a unique integer identifier in combination with (_source/_target), counting up from 1. The order of the edges within this set is not guaranteed.
"""
EDGE_COUNT_DUP_UNDIRECTED_TEXT = """The number of edges that have the same source/target combination as this (incl. this), if the network_data is interpreted as undirected multi graph."""
EDGE_IDX_DUP_UNDIRECTED_TEXT = """A unique index for this edge within its set of duplicates, if the network_data is interpreted as undirected multi graph.

This is a unique integer identifier in combination with (_source/_target), counting up from 1. The order of the edges within this set is not guaranteed.
"""


ALLOWED_AGGREGATION_FUNCTIONS = {
    "group_by": "Don't aggregate on this column, but keep it as is and use it in the group by clause.",
    "any_val": "Returns the first non-null value",
    "avg": "Calculates the average value for all tuples in arg.",
    "bool_and": "Returns TRUE if every input value is TRUE, otherwise FALSE.",
    "bool_or": "Returns TRUE if any input value is TRUE, otherwise FALSE.",
    "count": "Returns the number of input values.",
    "favg": "Calculates the average using a more accurate floating point summation (Kahan Sum).",
    "first": "Returns the first value of a column.",
    "fsum": "Calculates the sum using a more accurate floating point summation (Kahan Sum).",
    "histogram": "Returns a LIST of STRUCTs with the fields bucket and count.",
    "last": "Returns the last value of a column.",
    "list": "Returns a LIST containing all the values of a column.",
    "max": "Returns the maximum value present in the column.",
    "min": "Returns the minimum value present in the column.",
    "product": "Returns the product of all tuples in the column.",
    "string_agg_comma": "Concatenates the column string values with a comma separator.",
    "sum": "Calculates the sum value for all tuples in arg.",
}
AGGREGATION_FUNCTION_NAME = Literal[tuple(ALLOWED_AGGREGATION_FUNCTIONS.keys())]  # type: ignore


DEFAULT_UNWEIGHTED_NODE_DEGREE_COLUMN_NAME = "_degree_unweighted"
UNWEIGHTED_NODE_DEGREE_TEXT = (
    """The degree of a node is the number of edges connected to the node."""
)
UNWEIGHTED_DEGREE_CENTRALITY_COLUMN_NAME = "_degree_centrality"
UNWEIGHTED_DEGREE_CENTRALITY_MULTI_COLUMN_NAME = "_degree_centrality_multi"
UNWEIGHTED_DEGREE_CENTRALITY_TEXT = """The degree centrality values are normalized by dividing the degree of a node by the maximum possible degree in a simple graph n-1 where n is the number of nodes in the graph. For multigraphs or graphs with self loops the maximum degree might be higher than n-1 and values of degree centrality greater than 1 are possible."""
